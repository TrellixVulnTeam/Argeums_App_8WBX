import { Component, ViewChild, ElementRef, forwardRef, Input, Output, EventEmitter, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var LSelect2Component = /** @class */ (function () {
    function LSelect2Component(_renderer) {
        this._renderer = _renderer;
        this.options = {};
        this.valueChange = new EventEmitter();
        this._onChange = function (_) { };
        this._onTouched = function () { };
    }
    LSelect2Component.prototype.ngOnInit = function () { };
    LSelect2Component.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._jqueryElement = $(this.selectControll.nativeElement);
        this.initSelect2();
        this._jqueryElement.on('select2:select select2:unselect', function (e) {
            var data = _this._jqueryElement.select2('data');
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var item = data_1[_i];
                delete item.element;
                delete item.disabled;
                delete item.selected;
            }
            if (!_this.options.multiple) {
                data = (e.type == 'select2:unselect') ? null : data[0];
            }
            _this._onChange(data);
            _this.valueChange.emit(data);
        });
        if (this.selectedValue) {
            this.setSelect2Value(this.selectedValue);
        }
    };
    LSelect2Component.prototype.ngOnChanges = function (changes) {
        if (!this._jqueryElement)
            return;
        if (changes['data'] && JSON.stringify(changes['data'].previousValue) !== JSON.stringify(changes['data'].currentValue)) {
            this.initSelect2();
            if (this.selectedValue) {
                this.setSelect2Value(this.selectedValue);
            }
        }
    };
    LSelect2Component.prototype.ngOnDestroy = function () {
        this._jqueryElement.select2('destroy');
    };
    LSelect2Component.prototype.writeValue = function (value) {
        this.selectedValue = value;
        if (value !== null && value !== undefined)
            this.setSelect2Value(value);
    };
    LSelect2Component.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    LSelect2Component.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    LSelect2Component.prototype.initSelect2 = function () {
        if (this._jqueryElement.hasClass('select2-hidden-accessible') == true) {
            this._jqueryElement.select2('destroy');
            this._renderer.setElementProperty(this.selectControll.nativeElement, 'innerHTML', '');
        }
        var options = {
            data: this.data
        };
        Object.assign(options, this.options);
        this._jqueryElement.select2(options);
    };
    LSelect2Component.prototype.setSelect2Value = function (value) {
        if (!this._jqueryElement || !value) {
            this.selectedValue = value;
            return;
        }
        ;
        var targetVal = value['id'] || value;
        if (Array.isArray(value)) {
            targetVal = value.map(function (x) { return x['id']; });
        }
        this._jqueryElement.val(targetVal).trigger('change');
    };
    LSelect2Component.decorators = [
        { type: Component, args: [{
                    selector: 'l-select2',
                    template: "\n    <select #selectControll [disabled]=\"disabled\" style=\"width: 100%\">\n      <ng-content select=\"option, optgroup\">\n      </ng-content>\n    </select>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return LSelect2Component; }),
                            multi: true
                        }]
                },] },
    ];
    /** @nocollapse */
    LSelect2Component.ctorParameters = function () { return [
        { type: Renderer }
    ]; };
    LSelect2Component.propDecorators = {
        selectControll: [{ type: ViewChild, args: ['selectControll',] }],
        data: [{ type: Input }],
        disabled: [{ type: Input }],
        options: [{ type: Input }],
        valueChange: [{ type: Output }]
    };
    return LSelect2Component;
}());
export { LSelect2Component };
//# sourceMappingURL=select2.component.js.map